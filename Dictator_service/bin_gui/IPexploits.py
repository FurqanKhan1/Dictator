import MySQLdb
import Auto_logger
import threading
import time
import ast
import json
import datetime
from ansi2html import Ansi2HTMLConverter
from ansi2html_ import ansi2html
import os
class IPexploits:
	def __init__(self,Pid=None,Host=None,Port=None,Service=None,Project_status=None,Exploits=None,service_status=None,Command_id=None):
		self.id=None
		self.Pid=Pid
		self.Host=Host
		self.Port=Port
		self.Service=Service
		self.Project_status=Project_status
		self.Exploits=Exploits
		self.Command_id=None
		self.service_status=service_status
		self.con=None
		self.cursor=None
		self.logger=None
		self.project_id="Default"
		self.lock = threading.Lock()
		self.Auto_logger=Auto_logger.Logger()
		self.method_id="INIT"
		self.All_exploits=[]
		self.conv = Ansi2HTMLConverter()
		self.data_path=""
		


	def init_connection(self):
		try:
			self.method_id="Init_connection()"
			self.con=MySQLdb.connect("localhost","<USER>","<PASSWORD>","nmapscan")
			self.cursor = self.con.cursor()
		except Exception,ee:
			self.print_Error("EXception in connection-->"+str(ee))

	def close_connection(self):
		try:
			self.method_id="Close_connection()"
			self.con.close()
		except Exception, ee:
			self.print_Error("EXception in connection-->"+str(ee))

	def getIpExploits(self,project_id):

		try:
			#all_exploits=[]
			self.init_connection()
			self.method_id="GetIPExploits()"
			self.print_Log("Starting method --> "+self.method_id)
			id_=int(project_id)
			self.cursor.execute("select * from  IPexploits  where Pid=%s and service_type = 'existing'",(id_,))#launchConfiguration
			all_exploits= self.cursor.fetchall()
			self.close_connection()
			print "success"
			return all_exploits

		except Exception ,ee:
			self.print_Error("EXception -->"+str(ee))
			print ('exception '+str(ee))
			self.con.rollback();
			self.close_connection()
			return -1

	def Update_Reconfig(self,id_,pid,host,port,service,service_type,exploit_template,service_only=False):
		try:
			self.method_id="Reconfigure-Update"
			print "Here"
			self.print_Log("Inside update-Reconfig")
			self.init_connection()#Pid,Host,Port,Service,Project_status,Exploits)
			print (id_,pid,host,port,service,service_type)
			#('2788', '185', '192.168.179.136', '1099', 'ftp', 'existing')
			if(service_only==False):
				self.cursor.execute("update IPexploits set Host=%s ,Port=%s ,Service =%s ,service_type=%s,Exploits=%s where Pid=%s and id=%s",(host,port,service,service_type,exploit_template,int(pid),int(id_)))
			elif(service_only==True):
				self.cursor.execute("update IPexploits set Service =%s ,service_type=%s,Exploits=%s where Pid=%s and id=%s",(service,service_type,exploit_template,int(pid),int(id_)))
			self.con.commit()
			self.close_connection()
			self.print_Log("Finished update-Reconfig")
			

		except Exception ,ee:
			self.print_Error("Exception reconfig !!! " +str(ee))
			self.con.rollback()
			self.close_connection()
			
		
	
	def generate_report(self,project_id):
		try:
			print ("Started generate report")
			self.method_id="Generate report"
			#self.print_Log("Started --> generate report")
			
			self.init_connection()
			html=[]
			html.append("<div >")
			id_=int(project_id)
			self.cursor.execute("select distinct Service from IPexploits  where service_type='existing' and  Pid=%s",(id_,))#launchConfiguration
			all_services= self.cursor.fetchall()
			service_counter=0
			host_counter=0
			exploits_=0
			all_exploits=0
			print "Reached here"
			print "All service langth :"+str(len(all_services))
			all_service=1;
			for service in all_services:
				all_service=all_service +1
				#34495E  #2F4F4F
				html.append("<div  class=row style='border-style:solid;border-width:thin;border-color:#34495E;Background-color:#FFF'><div class=' col-sm-12 alert alert-info' style='background-color:#34495E;color:white'><h4><span class='glyphicon glyphicon-th-large'></span>&nbsp;Service : <a href=#  style='text-decoration:none;color:white'>"+service[0]+"</a></h4></div>")
				self.cursor.execute("select Id,Pid,Host,Port,Service,Exploits from IPexploits where Pid=%s and Service =%s and service_type='existing'",(id_,service[0]))
				report_data=self.cursor.fetchall()
				html.append("<div class=col-sm-12 id=service_"+str(service_counter)+ " style='display:block'>")
				service_counter=service_counter +1
				for record in report_data:
					html.append("<br><div><a href=#host_"+str(host_counter)+ " data-toggle=collapse><span class='glyphicon glyphicon-list'></span>&nbsp;&nbsp;"+str(record[2])+"</a><br></div><div class=collapse id=host_"+str(host_counter)+"><br><table class='table table-condensed' style='background-color:#34495E;color:white'><tr><td>Host</td><td>"+str(record[2])+"</td></tr><tr><td>PORT</td><td>"+str(record[3])+"</td><tr><td>Service</td><td>"+str(record[4])+"</td></tr></table>")
					html.append("<div class=exploit_header><a href=#exploits_"+str(exploits_)+" data-toggle=collapse><font color =red><span class='glyphicon glyphicon-list'></span>&nbsp;<b>Test Cases AND Commands</b> </font></a><br></div><div id=exploits_"+str(exploits_)+" 'style=display:none;' class=collapse><br><br><div class=exploits_result>")
					exploit_data={}
					exploit_data=record[5]
					if(isinstance(exploit_data,basestring)):
						#print "1"
						exploit_data=json.loads(exploit_data)
					#exploit_data=dict(exploit_data)
					#if(isinstance(exploit_data,dict)):
						# "22"
					#print "Exploit data --> "+str(exploit_data)
					host_counter=host_counter+1
					exploits_=exploits_+1
					
					if exploit_data:
						entries=exploit_data.get("Entries")
						if(entries):
							print "true--"
							for k,v in entries.iteritems():
								print "Generating"
								if(v):
									#print "REached here--------->" +str(v)
									#print "here------>"+str(k)
									command_id=str(k)
									html.append("<b> <font color=green><span class='glyphicon glyphicon-info-sign'></span>&nbsp;Command Id : "+str(command_id)+"</font></b><br><br>")
								
									commands = v[1] if v[1] else "No commands "								
									result=v[2] if v[2] else "No Results "
									final_commands=[]
									#print commands
									#print "aaa"
									if(commands !="No commands"):
										#print isinstance(commands,list)
										cmd = ast.literal_eval(commands)
										if (isinstance(cmd,list)):
											#print "inside if "
											for c in cmd:
												print "Found-"
												final_commands.append(c)
												
										else:
											print "Found"
											final_commands.append(str(cmd))
									#print "here v !!"
									commands=''.join(final_commands)
									all_exploits=all_exploits+1
									
									print "About to append"
									html.append("<div style=background-color:black;color:white>Command :<br>"+str(commands).replace("<","&lt").replace(">","&gt").replace('\n','<br>').replace('\r','<br>').replace('\r\n','').replace('\r\r','<br>')+"</div><br>")
									html.append("<div style=background-color:black;color:white>Results : <br>"+str(result.replace("<","&lt").replace(">","&gt")).replace('\n','<br>').replace('\r','<br>').replace('\r\n','').replace('\r\r','<br>') +"</div><br>")
									print "Appended"
					html.append("</div></div></div><br>")
				html.append('</div></div>')
				html.append("<div class=row style='background-color:#f1f1f1'><div class='col-sm-12'><br></div></div>")#close service div
				#print "Reached here also !!-->"+str(all_service)
													
					#html.append("<div class=exploit_header>EXPLITS AND COMMANDS"
					
					
			#self.con.commit()
			html.append("</div>")
			self.close_connection()
			self.folder_name=os.path.join("Results","Data_")
			print "Connection_closed"
			#self.print_Log("Finished Generating report")
			#self.data_path=self.folder_name+str(project_id)
			report_file=str(project_id)+"_report.html"
			report_file_path = os.path.join(self.data_path, report_file)
			output = open(report_file_path,"wb") #create a html report file and open it
			
			bootstrap='''<head>
  			
  			<meta charset="utf-8">
  			<meta name="viewport" content="width=device-width, initial-scale=1">
			<link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">
  			<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
			<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
  			<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
			<script src="bootstrap/js/jquery.js"></script>
			<script src="bootstrap/js/bootstrap.min.js"></script>
			<script type='text/javascript'>
			
$(document).ready(function(){ 
	//alert('hello world'); 
$('.collapse').on('shown.bs.collapse', function(){
//alert('bye');
$(this).parent().find(".glyphicon-plus").removeClass("glyphicon-plus").addClass("glyphicon-minus");
}).on('hidden.bs.collapse', function(){
$(this).parent().find(".glyphicon-minus").removeClass("glyphicon-minus").addClass("glyphicon-plus");
});	
});		</script>
			</head>'''
			nav_bar='''<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span> 
      </button>
     <p><a class="navbar-brand glyphicon glyphicon-king" style='color:red;position:relative;left:20%'><font color=red>-DICTATOR</font></a></p>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <ul class="nav navbar-nav" style=position:relative;left:3%>
	
        <li class="active"><a href="#">Scan Report</a></li>

      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="#"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
        <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
      </ul>
    </div>
  </div>
</nav>'''#e7e7e7
			output.write("<html><title>Nmap Scanning Result</title>"+bootstrap+"<body><div class='container-fluid' style=background-color:#f1f1f1>"+nav_bar+"<br><br><br><div class=col-sm-2 ><div class=row><div class='col-sm-12'><div class='col-sm-12' style='background-color:#6B8E23;color:white;text-align: center;'><h5><span class='glyphicon glyphicon-record'></span>&nbsp;Scan Summery</h5></div><div style=border-style:solid;border-width:thin;background-color:white><br><medium><font color=black><b>&nbsp;<span class='glyphicon glyphicon-ok-sign' style=color:#6B8E23></span>&nbsp; Date :"+str(datetime.datetime.now())[0:16]+"<br> &nbsp;<span class='glyphicon glyphicon-ok-sign' style=color:#6B8E23></span>&nbsp; Services : "+str(service_counter)+"<br>&nbsp;<span class='glyphicon glyphicon-ok-sign' style=color:#6B8E23></span>&nbsp; Test Cases : "+str(all_exploits)+"<br></b></font></medium></div><br><div class='col-sm-12' style='background-color:#6B8E23;color:white;text-align: center;'><h5><span class='glyphicon glyphicon-record'></span>&nbsp;Disclaimer</h5></div><div style=border-style:solid;border-width:thin;background-color:white><br><br><small><font color=red><ul class=list-group><li class=list-group-item><span class='glyphicon glyphicon-info-sign'></span>&nbsp;The scan results are subjected to Nmap's accurecy of determining open ports and avalible services.</li><li class=list-group-item><span class='glyphicon glyphicon-info-sign'></span>&nbsp;Nmap works on convention over exploration.If a well known port say 1433 is open,nmap assumes sql-server to be running on it,evn if some other service would be running.</li><li class=list-group-item><span class='glyphicon glyphicon-info-sign'></span>&nbsp;It is adviced that if the produced exploit results are strange ,then one must manually check for the service running on the port</li></ul></font></small></div></div></div></div><div class=col-sm-10 style=background-color:white>")
			print "wrote little"
			
			result_test = self.conv.convert(str(''.join(html)))
			html_final=ansi2html(str(''.join(html)))
			#output.write(str(''.join(html)))
			output.write(html_final)
			#output.write(str(result_test))
			#output = ansi2html('\033[1;32Hello\033[m')
			output.write(str("</div></div>"))
			#'''for l in result: #Note  result is a list of array.Each element is an array and holds multiple comma seperated values
				#output.write("<P><h3 style=""color:green;""><b>Service Name:</b></h3><h4>" + l[0] + "</h4></p><br>")
				#output.write("<p><h3 style=""color:blue;""><b>IP Address For Scanning:</b></h3><h4>" + l[2] + ":"+ l[3] +"</h4></p><br>")
				#output.write("<p><h3 style=""color:green;""><b>Script Checking:</b></h3><h4>" + l[1] + "</h4></p><br><br>")
				#output.write("<p><h3 style=""color:red;""><b>Command:</b></h3><h4>"+ l[4] + "</h4></p><br>")
				#output.write("<pre>" + l[5] + "</pre>" + "")
				#output.write("<br> <br> ")'''
			output.close()	
			print "Report generated successfully"
			#return str(''.join(html))
			
		except Exception ,ee:
			print ("Error "+str(ee))
			#self.print_Error("Exception occured in Method --" +str(ee))	
			self.close_connection()
			#self.print_Log("Error Generating report")	
						

	def Update(self,project_id,current_record_id,command_id,commands,result,is_file=False):
		try:

			self.init_connection()
			
			#print "Inside Update method with command id --->"+str(command_id)
			self.print_Log("Command id is ->" +str(command_id))
			#self.method_id="Update:::"
			#self.print_Log("Inside Update")
			self.print_Log("commands are : "+str(commands))
			
			
			command_id='"'+command_id+'"'
			command="$.Entries."+command_id
         		my_var=command
			my_var="'"+my_var +"'"
			self.print_Log("My var : "+str(my_var))
			#time.sleep(2)
			self.print_Log("Result --> : "+str(result))
			#print "\n\n\n Sql result is :"+str(result)
			#print "\n Sql command ::"+str(commands)
			#print "\n\n"
			sql_update="UPDATE IPexploits SET Exploits= JSON_REPLACE(Exploits, "+my_var+", JSON_ARRAY(false,%s,%s)) where id=%s and Pid=%s"
			
			#time.sleep(2)
			#print "\n\nSql to be executed --> "+sql_update			
			#time.sleep(3)
			
			self.cursor.execute(sql_update,(str(commands),str(result),int(current_record_id),int(project_id)))
		
			
			self.con.commit();
			self.close_connection()
			self.print_Log("Finished!!!")
			return 1

		except Exception ,ee:
			self.print_Error("EXception @@ -->"+str(ee))
			#self.print_Error("EXception -->"+str(ee))
			print ('exception '+str(ee))
			self.con.rollback();
			self.close_connection()
			return 0
		
	def getUnknownServices(self,project_id):
		try:
			self.init_connection()
			self.method_id="getUnknownServices"
			self.print_Log("Started getUNknown Services()")
			self.cursor.execute("select * from IPexploits where Pid=%s and (service_type='unknown' or service_type ='echo'or service_type='new' or service_type='existing')",(int(project_id),))
			rows=self.cursor.fetchall()
			self.close_connection()
			return rows
		except Exception ,ee:
			self.print_Error("Exception in GetUnknown Services"+str(ee))
			self.close_connection()

	def removeIPexploit(self,id_,all_= False):# print logs only when all=false ,as all=true is b4 setting the logger and woulddeadlock code
		try:
			self.init_connection()
			self.method_id="RemoveIPExploit()"
			#self.print_Log("Starting method --> "+self.method_id)
			if (all_==False):
				self.print_Log("Starting method --> "+self.method_id)
				self.cursor.execute("delete from IPexploits where id = %s",(int(id_),))
				self.print_Log("Exiting method -->"+self.method_id)
			elif(all_==True):
				self.cursor.execute("delete from IPexploits where Pid= %s",(int(id_),))
			self.con.commit();
			self.close_connection()
			#self.print_Log("Exiting method -->"+self.method_id)
		except Exception ,ee:
			if (all_==False):
				self.print_Error("Exception RemoveIPexploit -->"+str(ee))
			print ('exception '+str(ee))
			self.con.rollback();
			self.close_connection()

	
	def Exists(self,project_id):
		try:
			print "IN exists"
			self.init_connection()
			print "Connection init done()"
			self.method_id="Exists()"
			#self.print_Log("Starting method --> "+self.method_id)
			print "Logg printed"
			self.cursor.execute("select count(Pid) from IPexploits where Pid = %s",(int(project_id),))
			data=self.cursor.fetchone()
			return_val=0
			if (data):
				if (int(data[0]) >0):
					return_val=1
				else:
					return_val=0
			else:
				return_val=0
			self.con.commit();
			self.close_connection()
			#self.print_Log("Exiting method -->"+self.method_id)
			return return_val
		except Exception ,ee:
			#self.print_Error("EXception -->"+str(ee))
			print ('exception '+str(ee))
			self.con.rollback();
			self.close_connection()
			return return_val
		
	def insertIPexploits(self,IPexploits,single=False):
		try:
			self.init_connection()
			self.method_id="InsertIPExploits()"
			self.print_Log("{*}-Starting method --> "+self.method_id)
			if single==False :
				self.print_Log("Inserting many records")
				self.cursor.executemany("insert into IPexploits (Pid,Host,Port,Service,Project_status,Exploits,service_type) values (%s,%s,%s,%s,%s,%s,%s)",IPexploits)
			elif single==True:
				self.print_Log("Inserting single record")
				self.cursor.execute("insert into IPexploits (Pid,Host,Port,Service,Project_status,Exploits,service_type) values (%s,%s,%s,%s,%s,%s,%s)",IPexploits)
			#cursor.executemany("insert into test (f1,f2,f3,f4) values (%s,%s,%s,%s)",BulkList)
			self.con.commit();
			self.close_connection()

		except Exception ,ee:
			self.print_Error("EXception -->"+str(ee))
			print ('exception '+str(ee))
			self.con.rollback();
			self.close_connection()

	def print_Log(self,message):
		#self.Log_file=str(self.project_id) +str("_Log_file_info")
		#self.logger=self.Auto_logger.configureLoggerInfo(self.method_id,self.Log_file)
		try:
			self.lock.acquire()
			self.logger.debug(message)
			self.lock.release()	
		except Exception ,ee:
			self.lock.acquire()
			self.logger.critical(message +"--Exception :  --"+str(ee))
			self.lock.release()
		print "Message is : " +message+"\n"

	
		
	def print_Error(self,message):
		#self.Log_file=str(self.project_id) +str("_Log_file_info")
		#self.logger=self.Auto_logger.configureLoggerInfo(self.method_id,self.Log_file)
		#message="Command id --> "+str(self.command_id) +"  Message --> :" +str(message)
		try:
			self.lock.acquire()
			self.logger.error(message)
			self.lock.release()
		except Exception ,ee:
			self.lock.acquire()
			self.logger.error(message +"--Exception :  --"+str(ee))
			self.lock.release()
		print message+"\n"



#obj=IPexploits()
#print "started"
#obj.generate_report(246)
		
